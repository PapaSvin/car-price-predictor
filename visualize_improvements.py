"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è train loss
"""

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib.patches import FancyBboxPatch, FancyArrowPatch
import numpy as np

# –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –¥–≤—É–º—è –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 10))
fig.suptitle('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä: –°—Ç–∞—Ä–∞—è vs –£–ª—É—á—à–µ–Ω–Ω–∞—è', fontsize=18, fontweight='bold')

# –¶–≤–µ—Ç–∞
color_old = '#ff6b6b'
color_new = '#51cf66'
color_layer = '#4dabf7'
color_activation = '#ffd43b'
color_dropout = '#ff8787'

def draw_architecture(ax, title, layers, annotations, color_scheme):
    """–†–∏—Å—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    ax.set_xlim(0, 10)
    ax.set_ylim(0, len(layers) + 1)
    ax.axis('off')
    ax.set_title(title, fontsize=16, fontweight='bold', pad=20)
    
    y_pos = len(layers)
    
    for i, (layer_name, layer_info) in enumerate(layers):
        # –†–∏—Å—É–µ–º —Å–ª–æ–π
        width = layer_info.get('width', 6)
        height = 0.6
        x_center = 5
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
        if 'Linear' in layer_name:
            color = color_layer
        elif 'Activation' in layer_name or 'ReLU' in layer_name or 'LeakyReLU' in layer_name:
            color = color_activation
        elif 'Dropout' in layer_name:
            color = color_dropout
        else:
            color = '#dee2e6'
        
        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        rect = FancyBboxPatch(
            (x_center - width/2, y_pos - height/2),
            width, height,
            boxstyle="round,pad=0.1",
            edgecolor='black',
            facecolor=color,
            linewidth=2,
            alpha=0.8
        )
        ax.add_patch(rect)
        
        # –¢–µ–∫—Å—Ç —Å–ª–æ—è
        ax.text(x_center, y_pos, layer_name, 
                ha='center', va='center', 
                fontsize=11, fontweight='bold')
        
        # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–ø—Ä–∞–≤–∞
        if i in annotations:
            ax.text(x_center + width/2 + 0.5, y_pos, annotations[i],
                   ha='left', va='center', fontsize=9, 
                   style='italic', color='#495057')
        
        # –°—Ç—Ä–µ–ª–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ—é
        if i < len(layers) - 1:
            arrow = FancyArrowPatch(
                (x_center, y_pos - height/2 - 0.1),
                (x_center, y_pos - height/2 - 0.9),
                arrowstyle='->,head_width=0.4,head_length=0.4',
                color='black',
                linewidth=2
            )
            ax.add_patch(arrow)
        
        y_pos -= 1

# –°–¢–ê–†–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
old_layers = [
    ('Input Layer', {'width': 4}),
    ('Linear(input ‚Üí 256)', {'width': 7}),
    ('ReLU', {'width': 4}),
    ('BatchNorm1d(256)', {'width': 6}),
    ('Dropout(0.4)', {'width': 5}),
    ('Linear(256 ‚Üí 128)', {'width': 7}),
    ('ReLU', {'width': 4}),
    ('BatchNorm1d(128)', {'width': 6}),
    ('Dropout(0.4)', {'width': 5}),
    ('Linear(128 ‚Üí 64)', {'width': 6.5}),
    ('ReLU', {'width': 4}),
    ('BatchNorm1d(64)', {'width': 5.5}),
    ('Dropout(0.4)', {'width': 5}),
    ('Linear(64 ‚Üí 32)', {'width': 6}),
    ('ReLU', {'width': 4}),
    ('BatchNorm1d(32)', {'width': 5.5}),
    ('Dropout(0.4)', {'width': 5}),
    ('Linear(32 ‚Üí 1)', {'width': 5.5}),
    ('Output', {'width': 4}),
]

old_annotations = {
    4: '‚ùå –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π!',
    8: '‚ùå –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π!',
    12: '‚ùå –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π!',
    16: '‚ùå –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π!',
}

# –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
new_layers = [
    ('Input Layer', {'width': 4}),
    ('Linear(input ‚Üí 128)', {'width': 7}),
    ('LeakyReLU(0.1)', {'width': 5}),
    ('BatchNorm1d(128)', {'width': 6}),
    ('Dropout(0.2)', {'width': 5}),
    ('Linear(128 ‚Üí 64)', {'width': 6.5}),
    ('LeakyReLU(0.1)', {'width': 5}),
    ('BatchNorm1d(64)', {'width': 5.5}),
    ('Dropout(0.2)', {'width': 5}),
    ('Linear(64 ‚Üí 32)', {'width': 6}),
    ('LeakyReLU(0.1)', {'width': 5}),
    ('BatchNorm1d(32)', {'width': 5.5}),
    ('Dropout(0.15)', {'width': 5}),
    ('Linear(32 ‚Üí 1)', {'width': 5.5}),
    ('Output', {'width': 4}),
]

new_annotations = {
    2: '‚úÖ –õ—É—á—à–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã',
    4: '‚úÖ –°–Ω–∏–∂–µ–Ω –¥–æ 0.2',
    8: '‚úÖ –°–Ω–∏–∂–µ–Ω –¥–æ 0.2',
    12: '‚úÖ –°–Ω–∏–∂–µ–Ω –¥–æ 0.15',
}

draw_architecture(ax1, '–°–¢–ê–†–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê\n(4 —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—è)', old_layers, old_annotations, color_old)
draw_architecture(ax2, '–£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê\n(3 —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—è)', new_layers, new_annotations, color_new)

plt.tight_layout()
plt.savefig('architecture_comparison.png', dpi=150, bbox_inches='tight')
print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: architecture_comparison.png")

# –í–¢–û–†–û–ô –ì–†–ê–§–ò–ö: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
fig, ax = plt.subplots(figsize=(14, 8))
ax.axis('off')
fig.suptitle('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏–π', fontsize=18, fontweight='bold')

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
comparisons = [
    ('Batch Size', '64', '16', '4x –º–µ–Ω—å—à–µ ‚Üí –±–æ–ª—å—à–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π', color_new),
    ('Dropout Rate', '0.4', '0.2-0.15', '2x –º–µ–Ω—å—à–µ ‚Üí –ª—É—á—à–µ –æ–±—É—á–µ–Ω–∏–µ', color_new),
    ('Learning Rate', '0.001', '0.003 + scheduler', '3x + –∞–¥–∞–ø—Ç–∞—Ü–∏—è', color_new),
    ('Loss Function', 'MSE', 'Huber Loss', '–£—Å—Ç–æ–π—á–∏–≤–∞ –∫ –≤—ã–±—Ä–æ—Å–∞–º', color_new),
    ('Optimizer', 'Adam', 'AdamW', '–õ—É—á—à–∞—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è', color_new),
    ('Weight Decay', '1e-5', '1e-4', '10x —Å–∏–ª—å–Ω–µ–µ', color_new),
    ('Activation', 'ReLU', 'LeakyReLU', '–ù–µ—Ç dying neurons', color_new),
    ('LR Scheduler', '‚ùå –ù–µ—Ç', '‚úÖ ReduceLROnPlateau', '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å', color_new),
    ('Early Stopping', '‚ùå –ù–µ—Ç', '‚úÖ Patience=50', '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —ç–ø–æ—Ö–∏', color_new),
    ('Gradient Clipping', '‚ùå –ù–µ—Ç', '‚úÖ max_norm=1.0', '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', color_new),
    ('Weight Init', '‚ùå –°–ª—É—á–∞–π–Ω–∞—è', '‚úÖ Kaiming/He', '–ë—ã—Å—Ç—Ä–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å', color_new),
]

y_start = 0.95
y_step = 0.08

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
ax.text(0.15, y_start, '–ü–∞—Ä–∞–º–µ—Ç—Ä', fontsize=14, fontweight='bold', ha='center')
ax.text(0.35, y_start, '–ë—ã–ª–æ', fontsize=14, fontweight='bold', ha='center')
ax.text(0.55, y_start, '–°—Ç–∞–ª–æ', fontsize=14, fontweight='bold', ha='center')
ax.text(0.80, y_start, '–≠—Ñ—Ñ–µ–∫—Ç', fontsize=14, fontweight='bold', ha='center')

# –õ–∏–Ω–∏—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
ax.plot([0.05, 0.95], [y_start - 0.02, y_start - 0.02], 'k-', linewidth=2)

y_pos = y_start - 0.05

for i, (param, old_val, new_val, effect, color) in enumerate(comparisons):
    # –§–æ–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏
    if i % 2 == 0:
        rect = plt.Rectangle((0.05, y_pos - 0.03), 0.9, 0.07, 
                            facecolor='#f8f9fa', edgecolor='none', alpha=0.5)
        ax.add_patch(rect)
    
    # –¢–µ–∫—Å—Ç
    ax.text(0.15, y_pos, param, fontsize=11, ha='center', va='center', fontweight='bold')
    ax.text(0.35, y_pos, old_val, fontsize=10, ha='center', va='center', 
            color='#dc3545', fontweight='bold')
    ax.text(0.55, y_pos, new_val, fontsize=10, ha='center', va='center', 
            color='#28a745', fontweight='bold')
    ax.text(0.80, y_pos, effect, fontsize=9, ha='center', va='center', style='italic')
    
    y_pos -= y_step

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
y_bottom = 0.08
ax.text(0.5, y_bottom, 'üéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Train Loss —Å–Ω–∏–∑–∏—Ç—Å—è –≤ 2-3 —Ä–∞–∑–∞!', 
        fontsize=14, ha='center', fontweight='bold', 
        bbox=dict(boxstyle='round,pad=0.5', facecolor=color_new, alpha=0.3))

plt.tight_layout()
plt.savefig('hyperparameters_comparison.png', dpi=150, bbox_inches='tight')
print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: hyperparameters_comparison.png")

# –¢–†–ï–¢–ò–ô –ì–†–ê–§–ò–ö: –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ loss
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))
fig.suptitle('–û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ Train Loss', fontsize=16, fontweight='bold')

epochs = np.arange(1, 201)

# –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å (—Å–∏–º—É–ª—è—Ü–∏—è)
old_train_loss = 0.18 * np.exp(-0.01 * epochs) + 0.15 + np.random.normal(0, 0.01, len(epochs))
old_test_loss = 0.20 * np.exp(-0.01 * epochs) + 0.16 + np.random.normal(0, 0.015, len(epochs))

# –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å (—Å–∏–º—É–ª—è—Ü–∏—è)
new_train_loss = 0.15 * np.exp(-0.03 * epochs) + 0.05 + np.random.normal(0, 0.005, len(epochs))
new_test_loss = 0.17 * np.exp(-0.03 * epochs) + 0.06 + np.random.normal(0, 0.008, len(epochs))

# –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å
ax1.plot(epochs, old_train_loss, label='Train Loss', color='#ff6b6b', linewidth=2)
ax1.plot(epochs, old_test_loss, label='Test Loss', color='#ff8787', linewidth=2, linestyle='--')
ax1.set_xlabel('Epoch', fontsize=12)
ax1.set_ylabel('Loss (MSE)', fontsize=12)
ax1.set_title('–°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å\n(–º–µ–¥–ª–µ–Ω–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å)', fontsize=13, fontweight='bold')
ax1.legend(fontsize=10)
ax1.grid(True, alpha=0.3)
ax1.set_ylim(0, 0.4)
ax1.axhline(y=0.15, color='red', linestyle=':', linewidth=2, alpha=0.5, label='–ó–∞—Å—Ç—Ä–µ–≤–∞–µ—Ç –Ω–∞ 0.15')

# –ì—Ä–∞—Ñ–∏–∫ 2: –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å
ax2.plot(epochs, new_train_loss, label='Train Loss', color='#51cf66', linewidth=2)
ax2.plot(epochs, new_test_loss, label='Test Loss', color='#69db7c', linewidth=2, linestyle='--')
ax2.set_xlabel('Epoch', fontsize=12)
ax2.set_ylabel('Loss (Huber)', fontsize=12)
ax2.set_title('–£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å\n(–±—ã—Å—Ç—Ä–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å)', fontsize=13, fontweight='bold')
ax2.legend(fontsize=10)
ax2.grid(True, alpha=0.3)
ax2.set_ylim(0, 0.4)
ax2.axhline(y=0.05, color='green', linestyle=':', linewidth=2, alpha=0.5, label='–î–æ—Å—Ç–∏–≥–∞–µ—Ç 0.05')

# –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏
ax1.annotate('–ú–µ–¥–ª–µ–Ω–Ω–æ–µ\n—É–ª—É—á—à–µ–Ω–∏–µ', xy=(100, 0.16), xytext=(130, 0.25),
            arrowprops=dict(arrowstyle='->', color='red', lw=2),
            fontsize=11, color='red', fontweight='bold')

ax2.annotate('–ë—ã—Å—Ç—Ä–æ–µ\n—É–ª—É—á—à–µ–Ω–∏–µ', xy=(50, 0.08), xytext=(80, 0.18),
            arrowprops=dict(arrowstyle='->', color='green', lw=2),
            fontsize=11, color='green', fontweight='bold')

plt.tight_layout()
plt.savefig('expected_loss_improvement.png', dpi=150, bbox_inches='tight')
print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: expected_loss_improvement.png")

print("\n" + "="*60)
print("–í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
print("="*60)
print("\n–§–∞–π–ª—ã:")
print("  üìä architecture_comparison.png - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä")
print("  üìä hyperparameters_comparison.png - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print("  üìä expected_loss_improvement.png - –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ loss")
print("\n–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python main_improved.py")
